<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="stock.dal.mapper.ExceptionLogMapper">
    <resultMap id="BaseResultMap" type="stock.dal.model.ExceptionLog">
        <id column="id" property="id" jdbcType="VARCHAR"/>
        <result column="stock_id" property="stockId" jdbcType="VARCHAR"/>
        <result column="event" property="event" jdbcType="VARCHAR"/>
        <result column="param" property="param" jdbcType="VARCHAR"/>
        <result column="status" property="status" jdbcType="VARCHAR"/>
        <result column="error_msg" property="errorMsg" jdbcType="VARCHAR"/>
        <result column="create_time" property="createTime" jdbcType="DATE"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        id, stock_id, event, param, status, error_msg, create_time
    </sql>
    <select id="selectByExample" resultMap="BaseResultMap" parameterType="stock.dal.model.ExceptionLogExample">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from exception_log
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String">
        select
        <include refid="Base_Column_List"/>
        from exception_log
        where id = #{id,jdbcType=VARCHAR}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
        delete from exception_log
        where id = #{id,jdbcType=VARCHAR}
    </delete>
    <delete id="deleteByExample" parameterType="stock.dal.model.ExceptionLogExample">
        delete from exception_log
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="stock.dal.model.ExceptionLog">
        insert into exception_log (id, stock_id, event,
        param, status, error_msg,
        create_time)
        values (#{id,jdbcType=VARCHAR}, #{stockId,jdbcType=VARCHAR}, #{event,jdbcType=VARCHAR},
        #{param,jdbcType=VARCHAR}, #{status,jdbcType=VARCHAR}, #{errorMsg,jdbcType=VARCHAR},
        #{createTime,jdbcType=DATE})
    </insert>
    <insert id="insertSelective" parameterType="stock.dal.model.ExceptionLog">
        insert into exception_log
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="stockId != null">
                stock_id,
            </if>
            <if test="event != null">
                event,
            </if>
            <if test="param != null">
                param,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="errorMsg != null">
                error_msg,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=VARCHAR},
            </if>
            <if test="stockId != null">
                #{stockId,jdbcType=VARCHAR},
            </if>
            <if test="event != null">
                #{event,jdbcType=VARCHAR},
            </if>
            <if test="param != null">
                #{param,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                #{status,jdbcType=VARCHAR},
            </if>
            <if test="errorMsg != null">
                #{errorMsg,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=DATE},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="stock.dal.model.ExceptionLogExample" resultType="java.lang.Integer">
        select count(*) from exception_log
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update exception_log
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=VARCHAR},
            </if>
            <if test="record.stockId != null">
                stock_id = #{record.stockId,jdbcType=VARCHAR},
            </if>
            <if test="record.event != null">
                event = #{record.event,jdbcType=VARCHAR},
            </if>
            <if test="record.param != null">
                param = #{record.param,jdbcType=VARCHAR},
            </if>
            <if test="record.status != null">
                status = #{record.status,jdbcType=VARCHAR},
            </if>
            <if test="record.errorMsg != null">
                error_msg = #{record.errorMsg,jdbcType=VARCHAR},
            </if>
            <if test="record.createTime != null">
                create_time = #{record.createTime,jdbcType=DATE},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update exception_log
        set id = #{record.id,jdbcType=VARCHAR},
        stock_id = #{record.stockId,jdbcType=VARCHAR},
        event = #{record.event,jdbcType=VARCHAR},
        param = #{record.param,jdbcType=VARCHAR},
        status = #{record.status,jdbcType=VARCHAR},
        error_msg = #{record.errorMsg,jdbcType=VARCHAR},
        create_time = #{record.createTime,jdbcType=DATE}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="stock.dal.model.ExceptionLog">
        update exception_log
        <set>
            <if test="stockId != null">
                stock_id = #{stockId,jdbcType=VARCHAR},
            </if>
            <if test="event != null">
                event = #{event,jdbcType=VARCHAR},
            </if>
            <if test="param != null">
                param = #{param,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=VARCHAR},
            </if>
            <if test="errorMsg != null">
                error_msg = #{errorMsg,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=DATE},
            </if>
        </set>
        where id = #{id,jdbcType=VARCHAR}
    </update>
    <update id="updateByPrimaryKey" parameterType="stock.dal.model.ExceptionLog">
        update exception_log
        set stock_id = #{stockId,jdbcType=VARCHAR},
        event = #{event,jdbcType=VARCHAR},
        param = #{param,jdbcType=VARCHAR},
        status = #{status,jdbcType=VARCHAR},
        error_msg = #{errorMsg,jdbcType=VARCHAR},
        create_time = #{createTime,jdbcType=DATE}
        where id = #{id,jdbcType=VARCHAR}
    </update>
</mapper>